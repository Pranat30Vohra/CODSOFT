import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import VotingClassifier
from imblearn.over_sampling import SMOTE
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
import re
import nltk


nltk.download('stopwords')
nltk.download('wordnet')

def clean_text(text):
    text = re.sub(r'[^a-zA-Z\s]', '', text)  
    text = text.lower() 
    words = text.split()
    lemmatizer = WordNetLemmatizer()
    words = [lemmatizer.lemmatize(word) for word in words if word not in stopwords.words('english')]  # Lemmatization and removing stopwords
    return ' '.join(words)

df_path = r"C:\Users\HP\Downloads\archive (5)\Genre Classification Dataset\train_data.txt"
dc_path = r"C:\Users\HP\Downloads\archive (5)\Genre Classification Dataset\test_data.txt"

df = pd.read_csv(df_path, sep=':::', names=['title', 'genre', 'description'], engine='python')
dc = pd.read_csv(dc_path, sep=':::', names=['title', 'genre', 'description'], engine='python')

df.drop(columns=['title'], inplace=True)
dc.drop(columns=['title'], inplace=True)

print("Applying TF-IDF vectorization on descriptions...")
vectorizer = TfidfVectorizer(stop_words='english', max_features=15000, ngram_range=(1, 3), sublinear_tf=True)
X = vectorizer.fit_transform(df['description'])
y = df['genre']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

print("Handling class imbalance using SMOTE...")
smote = SMOTE(sampling_strategy='auto', random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)

print("Performing hyperparameter tuning with GridSearchCV...")
param_grid = {
    'alpha': [0.01, 0.1, 0.5, 1.0, 2.0]  
}

nb_classifier = MultinomialNB()

grid_search = GridSearchCV(estimator=nb_classifier, param_grid=param_grid, cv=3, n_jobs=-1, verbose=1)
grid_search.fit(X_train_resampled, y_train_resampled)

print("Best parameters found by GridSearchCV:", grid_search.best_params_)

best_classifier = grid_search.best_estimator_

print("Training VotingClassifier with Naive Bayes and Logistic Regression...")
from sklearn.linear_model import LogisticRegression

log_reg = LogisticRegression(max_iter=1000, random_state=42)
voting_clf = VotingClassifier(estimators=[('naive_bayes', best_classifier), ('log_reg', log_reg)], voting='soft')
voting_clf.fit(X_train_resampled, y_train_resampled)

y_pred = voting_clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy on test set: {accuracy:.4f}")
print(classification_report(y_test, y_pred))

print("Predicting genres for the test dataset...")
X_dc = vectorizer.transform(dc['description'])
dc['predicted_genre'] = voting_clf.predict(X_dc)

dc.to_csv(r'C:\Users\HP\Downloads\genre_predictions.csv', index=False)

print(dc[['genre', 'predicted_genre']].head(20))
